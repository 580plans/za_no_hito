// script.js (Refactored & Fixed for Ranked Crown UI - Full Code)

// --- 1. グローバルヘルパー関数 ---
function escapeHtml(unsafe) { if (typeof unsafe !== 'string') { return unsafe; } return unsafe.replace(/&/g, "&").replace(/</g, "<").replace(/>/g, ">").replace(/"/g, '"').replace(/'/g, "'"); }
function getCrownHtml(rank) { if (rank === 1) { return '<span class="crown gold">👑</span>'; } return ''; }
function getQueryParam(param) { const urlParams = new URLSearchParams(window.location.search); return urlParams.get(param); }
function getYouTubeVideoId(url) { if (!url) return null; let videoId = null; const regex = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/; const match = url.match(regex); if (match) { videoId = match[1]; } return videoId; }


// --- 2. サイト全体のアプリケーションオブジェクト ---
const App = {
    // --- 2.1. データプロパティ ---
    currentUser: {}, essays: [], popularEssays: [], mediaItems: [], allThreads: [], notifications: [], allComments: {}, threadComments: {},
    followingUsers: [ { name: "ユーザーA", profileUrl: "profile.html?user=userA" }, { name: "ユーザーB", profileUrl: "profile.html?user=userB" }, { name: "ユーザーC", profileUrl: "profile.html?user=userC" }, ],
    categoryDisplayNames: { zatsudan: '雑談', news: 'ニュース', work: '会社・仕事', anime: 'アニメ', sports: 'スポーツ', tv: 'テレビ', game: 'ゲーム', unknown: 'その他' },
    profileFields: { username: { display: 'display-username', edit: 'edit_username' }, age: { display: 'display-age', edit: 'edit_age' }, gender: { display: 'display-gender', edit: 'edit_gender' }, blood_type: { display: 'display-blood_type', edit: 'edit_blood_type' }, star_sign: { display: 'display-star_sign', edit: 'edit_star_sign' }, residence: { display: 'display-residence', edit: 'edit_residence' }, height: { display: 'display-height', edit: 'edit_height' }, favorite_celebrity: { display: 'display-favorite_celebrity', edit: 'edit_favorite_celebrity' }, favorite_type: { display: 'display-favorite_type', edit: 'edit_favorite_type' }, favorite_food: { display: 'display-favorite_food', edit: 'edit_favorite_food' }, public_hobby: { display: 'display-public_hobby', edit: 'edit_public_hobby' }, private_hobby: { display: 'display-private_hobby', edit: 'edit_private_hobby' }, skill: { display: 'display-skill', edit: 'edit_skill' }, favorite_manga: { display: 'display-favorite_manga', edit: 'edit_favorite_manga' }, favorite_media: { display: 'display-favorite_media', edit: 'edit_favorite_media' }, motto: { display: 'display-motto', edit: 'edit_motto' }, ultimate_skill: { display: 'display-ultimate_skill', edit: 'edit_ultimate_skill' }, disliked_person: { display: 'display-disliked_person', edit: 'edit_disliked_person' }, future_dream: { display: 'display-future_dream', edit: 'edit_future_dream' } },
    genderMap: { "": "[未設定]", "male": "男性", "female": "女性", "other": "その他" },
    bloodTypeMap: { "": "[未設定]", "A": "A型", "B": "B型", "O": "O型", "AB": "AB型" },

    // --- 2.2. データ初期化メソッド ---
    initializeData: function() { const profile = JSON.parse(localStorage.getItem('userProfile') || '{}'); this.currentUser = { name: profile.username || "座の人ユーザー", profileImageUrl: profile.profileImage || "default_user_thumb.png" }; const storedEssays = localStorage.getItem('essays'); this.essays = storedEssays ? JSON.parse(storedEssays) : this.getSampleEssays(); if (!storedEssays) localStorage.setItem('essays', JSON.stringify(this.essays)); const storedThreads = localStorage.getItem('allThreads'); this.allThreads = storedThreads ? JSON.parse(storedThreads) : this.getSampleThreads(); if (!storedThreads) localStorage.setItem('allThreads', JSON.stringify(this.allThreads)); const storedEssayComments = localStorage.getItem('allComments'); this.allComments = storedEssayComments ? JSON.parse(storedEssayComments) : this.getSampleEssayComments(); if (!storedEssayComments) localStorage.setItem('allComments', JSON.stringify(this.allComments)); this.threadComments = JSON.parse(localStorage.getItem('threadComments') || '{"thread001": [{ "author": "名無しさんA", "text": "良い週末を！", "date": "2024-05-21T10:00:00Z" }], "thread002": [{ "author": "映画ファン", "text": "最高でした！特にラストが…！", "date": "2024-05-20T14:00:00Z" }]}'); if (!localStorage.getItem('threadComments')) localStorage.setItem('threadComments', JSON.stringify(this.threadComments)); this.popularEssays = this.getSamplePopularEssays(); this.notifications = this.getSampleNotifications(); this.initializeMediaItems(); },
    // --- 2.3. サンプルデータ生成メソッド群 ---
    getSampleEssays: function() { return [ { id: 1, title: 'サイト開設のご挨拶', author: '管理人', snippet: 'このサイト「座の人」を開設しました。日々の雑記や思ったことを気ままに綴っていきます。', date: '2024-05-21', image: 'https://dummyimage.com/600x400/777/fff&text=Greeting+Image', videoUrl: null, body: 'このサイト「座の人」を開設しました。<br>日々の雑記や思ったことを気ままに綴っていきます。<br><br>どうぞよろしくお願いいたします。' }, { id: 2, title: 'お気に入りのカフェ紹介 (動画あり)', author: 'ユーザーA', snippet: '最近見つけたカフェがとても素敵です。動画で雰囲気をご覧ください。', date: '2024-05-20', image: null, videoUrl: 'sample_video.mp4', body: '最近見つけたカフェがとても素敵です。<br>静かで落ち着いた雰囲気で、コーヒーも美味しい。<br>作業にも読書にもぴったりな空間です。お店の名前は「カフェ・ド・リラックス」。<br>ぜひ一度訪れてみてください。 (sample_video.mp4はローカルにダミーファイルを置いてください)' }, { id: 3, title: '週末のハイキング記録', author: 'ユーザーB', snippet: '天気が良かったので、近くの山へハイキングに行ってきました。頂上からの景色は最高で、リフレッシュできました！', date: '2024-05-19', image: 'https://dummyimage.com/600x400/4CAF50/fff&text=Hiking+Detail', videoUrl: null, body: '天気が良かったので、近くの「見晴らし山」へハイキングに行ってきました。<br>片道約1時間半の道のりでしたが、新緑がとても綺麗で気持ちよかったです。<br>頂上からの景色は最高で、日頃の疲れも吹き飛びました！<br>お弁当も美味しかった。また行きたいです。' }, { id: 4, title: '読んだ本の感想：思考の整理学', author: 'ユーザーC', snippet: '外山滋比古氏の「思考の整理学」を読みました。グライダー能力と飛行機能力の話が印象的。自分の思考プロセスを見直す良いきっかけになりました。', date: '2024-05-18', image: null, videoUrl: null, body: '外山滋比古氏の「思考の整理学」を読みました。<br>特に「グライダー能力」と「飛行機能力」の話が印象的でした。<br>情報を集めるだけでなく、それを自分なりに発酵させ、新しいアイデアを生み出すことの重要性を再認識しました。<br>自分の思考プロセスを見直す良いきっかけになった一冊です。' }, { id: 5, title: '新しい趣味、始めました！', author: 'テストユーザー', snippet: '最近、料理を始めました。作るのも食べるのも楽しいです。美味しいパスタが作れるようになりたいな。', date: '2024-05-22', image: 'https://dummyimage.com/600x400/333/fff&text=Cooking+Detail', videoUrl: null, body: '最近、新しい趣味として料理を始めました！<br>これまであまり自炊をしてこなかったのですが、挑戦してみると意外と楽しくてハマっています。<br>作るのも食べるのも楽しいですね。<br>目下の目標は、美味しいペペロンチーノが作れるようになることです！' }, { id: 6, title: '座の人ユーザーの日記１ (動画付き)', author: '座の人ユーザー', snippet: 'これは座の人ユーザーによる最初の投稿です。よろしくお願いします。', date: '2024-06-01', image: null, videoUrl: 'sample_video2.mp4', body: '座の人ユーザーです。<br>このミニブログで、日々の出来事や考えを共有していきたいと思います。<br>趣味は読書と散歩です。今日は散歩中に見つけた風景を動画でどうぞ。(sample_video2.mp4はローカルにダミーファイルを置いてください)' }, { id: 7, title: '最近観た映画について', author: '座の人ユーザー', snippet: '先日、話題のSF映画を観てきました。映像美が素晴らしかったです。', date: '2024-06-05', image: null, videoUrl: null, body: '先日、話題のSF大作映画「ギャラクシー・アドベンチャーXX」を観てきました。<br>壮大な宇宙の映像美と、手に汗握るアクションシーンに圧倒されました。<br>ストーリーも感動的で、観終わった後しばらく余韻に浸っていました。おすすめです！' }, { id: 8, title: '週末の予定', author: '座の人ユーザー', snippet: '今週末は、新しいカフェを開拓しに行く予定です。楽しみ！', date: '2024-06-10', image: 'https://dummyimage.com/600x400/ffc107/000&text=Weekend', videoUrl: null, body: '今週末の予定は…<br>土曜日は、最近オープンしたと噂のブックカフェに行ってみたいと思います。<br>美味しいコーヒーを飲みながら、ゆっくり読書ができたら最高ですね。<br>日曜日は、天気が良ければ公園でのんびり過ごそうかと考えています。' }, { id: 9, title: 'プログラミング学習の進捗', author: '座の人ユーザー', snippet: 'JavaScriptの非同期処理について勉強中。なかなか難しいけど面白い。', date: '2024-06-15', image: null, videoUrl: null, body: '最近はJavaScriptの非同期処理（Promiseやasync/await）について集中的に勉強しています。<br>概念を理解するのがなかなか大変ですが、少しずつ分かってくると非常に面白いです。<br>実際にコードを書いて動かしてみるのが一番ですね。' }, { id: 10, title: '今日のランチ', author: '座の人ユーザー', snippet: '今日は手作りパスタに挑戦。ペペロンチーノが上手にできた！', date: '2024-06-17', image: 'https://dummyimage.com/600x400/28a745/fff&text=Pasta', videoUrl: null, body: '今日のランチは、久しぶりに手作りパスタに挑戦しました。<br>念願のペペロンチーノです！<br>ニンニクと唐辛子の風味、オリーブオイルの乳化も上手くいって、過去最高の出来栄えでした。<br>やっぱり自分で作ると美味しいですね。' } ]; },
    getSampleThreads: function() { return [ { id: 'thread001', title: '今週末の天気とおすすめスポット', category: 'zatsudan', accessCount: 2580, commentCount: 35, createdAt: new Date(Date.now() - 86400000 * 1).toISOString(), author: "管理人" }, { id: 'thread002', title: 'あの新作映画、見た人いる？【ネタバレ注意】', category: 'tv', accessCount: 1890, commentCount: 152, createdAt: new Date(Date.now() - 86400000 * 2).toISOString(), author: "ユーザーA" }, { id: 'thread003', title: 'プログラミング学習で最初にぶつかる壁', category: 'work', accessCount: 1550, commentCount: 88, createdAt: new Date(Date.now() - 86400000 * 3).toISOString(), author: "ユーザーB" }, { id: 'thread004', title: '健康のための食生活改善レポート', category: 'zatsudan', accessCount: 1230, commentCount: 45, createdAt: new Date(Date.now() - 86400000 * 0.5).toISOString(), author: "ユーザーC" }, { id: 'thread005', title: '最新AI技術の活用事例と倫理問題', category: 'news', accessCount: 2200, commentCount: 62, createdAt: new Date(Date.now() - 86400000 * 4).toISOString(), author: "管理人" }, { id: 'thread006', title: 'お気に入りのインディーズゲーム教えて！', category: 'game', accessCount: 980, commentCount: 180, createdAt: new Date(Date.now() - 86400000 * 1.5).toISOString(), author: "ユーザーA" }, { id: 'thread007', title: '今期の覇権アニメはこれだ！徹底討論', category: 'anime', accessCount: 1750, commentCount: 210, createdAt: new Date(Date.now() - 86400000 * 2.5).toISOString(), author: "ユーザーB" }, { id: 'thread008', title: '応援してるスポーツチームの現状と未来', category: 'sports', accessCount: 1100, commentCount: 75, createdAt: new Date(Date.now() - 86400000 * 0.8).toISOString(), author: "ユーザーC" }, { id: 'thread009', title: '買ってよかったガジェット2024年上半期', category: 'zatsudan', accessCount: 1950, commentCount: 92, createdAt: new Date(Date.now() - 86400000 * 5).toISOString(), author: "管理人" }, { id: 'thread010', title: '最近のテレビ番組、面白いの減った？', category: 'tv', accessCount: 850, commentCount: 130, createdAt: new Date(Date.now() - 86400000 * 6).toISOString(), author: "ユーザーA" }, ]; },
    getSampleEssayComments: function() { return { 1: [ { author: '読者X', text: '開設おめでとうございます！楽しみにしています。', date: '2024-05-21T12:00:00Z' }, { author: '読者Y', text: '頑張ってください！', date: '2024-05-21T15:30:00Z' } ], 3: [ { author: 'ハイカーZ', text: '見晴らし山、いいですよね！私も好きです。', date: '2024-05-20T09:00:00Z' } ], 6: [ { author: 'コメントユーザーα', text: '初投稿おめでとうございます！応援しています。', date: new Date(Date.now() - 86400000 * 0.5).toISOString() } ], 7: [ { author: '映画好きβ', text: 'その映画、私も見ました！本当に最高でしたね！', date: new Date(Date.now() - 3600000 * 3).toISOString() } ] }; },
    getSamplePopularEssays: function() { return [ { id: 3, title: '週末のハイキング記録 (人気)', author: 'ユーザーB', snippet: '天気が良かったので、近くの山へハイキングに行ってきました。頂上からの景色は最高で、リフレッシュできました！', date: '2024-05-19', views: 105, image: 'https://dummyimage.com/600x400/4CAF50/fff&text=Hiking+Detail' }, { id: 1, title: 'サイト開設のご挨拶 (人気)', author: '管理人', snippet: 'このサイト「座の人」を開設しました。日々の雑記や思ったことを気ままに綴っていきます。', date: '2024-05-21', views: 98, image: 'https://dummyimage.com/600x400/777/fff&text=Greeting+Detail' }, { id: 10, title: '今日のランチ (人気)', author: '座の人ユーザー', snippet: '今日は手作りパスタに挑戦。ペペロンチーノが上手にできた！', date: '2024-06-17', views: 120, image: 'https://dummyimage.com/600x400/28a745/fff&text=Pasta' } ]; },
    getSampleNotifications: function() { return [ { id: 'noti001', type: 'comment', user: { name: 'コメントした人A', profileUrl: 'profile.html?user=userA' }, essay: { title: 'サイト開設のご挨拶', url: 'essay_detail.html?id=1' }, message: null, date: new Date(Date.now() - 3600000 * 2).toISOString(), read: false }, { id: 'noti002', type: 'follow', user: { name: '刮目した人B', profileUrl: 'profile.html?user=userB' }, essay: null, message: null, date: new Date(Date.now() - 3600000 * 5).toISOString(), read: true }, { id: 'noti003', type: 'system', user: null, essay: null, message: 'サイトメンテナンスのお知らせ：明日午前2時から3時まで、一時的にサイトをご利用いただけません。', date: new Date(Date.now() - 86400000 * 1).toISOString(), read: false }, { id: 'noti004', type: 'comment', user: { name: 'コメントした人C', profileUrl: 'profile.html?user=userC' }, essay: { title: '週末のハイキング記録', url: 'essay_detail.html?id=3' }, message: null, date: new Date(Date.now() - 86400000 * 2).toISOString(), read: true } ]; },
    initializeMediaItems: function() { this.mediaItems = []; this.essays.forEach(essay => { if (essay.image) { this.mediaItems.push({ type: 'essay_image', mediaUrl: essay.image, thumbnailUrl: essay.image, essayId: essay.id, essayTitle: essay.title, author: essay.author, timestamp: new Date(essay.date).getTime(), linkUrl: `essay_detail.html?id=${essay.id}` }); } if (essay.videoUrl) { this.mediaItems.push({ type: 'essay_video', mediaUrl: essay.videoUrl, thumbnailUrl: 'video_thumb_icon.png', essayId: essay.id, essayTitle: essay.title, author: essay.author, timestamp: new Date(essay.date).getTime(), linkUrl: `essay_detail.html?id=${essay.id}` }); } }); this.mediaItems.sort((a, b) => b.timestamp - a.timestamp); },
    
    // --- 2.4. ページごとの初期化メソッド群 ---
    async init(path) { console.log(`App: Initializing page: ${path}`); const pageInitializers = { 'index.html': this.initIndexPage, 'logged_in.html': this.initLoggedInPage, 'essay_detail.html': this.initEssayDetailPage, 'create_essay.html': this.initCreateEssayPage, 'past_essays.html': this.initPastEssaysPage, 'profile.html': this.initProfilePage, 'notifications.html': this.initNotificationsPage, 'bulletinboard.html': this.initBulletinboardPage, 'thread_detail.html': this.initThreadDetailPage, 'category_zatsudan.html': () => this.initCategoryPage('zatsudan'), 'category_news.html': () => this.initCategoryPage('news'), 'category_work.html': () => this.initCategoryPage('work'), 'category_anime.html': () => this.initCategoryPage('anime'), 'category_sports.html': () => this.initCategoryPage('sports'), 'category_tv.html': () => this.initCategoryPage('tv'), 'category_game.html': () => this.initCategoryPage('game'), }; const initFunction = pageInitializers[path]; if (typeof initFunction === 'function') { await initFunction.call(this); } else { console.warn("No specific initializer for this page:", path); } console.log(`App: Initialization finished for ${path}`); },
    initIndexPage: function() { console.log("Initializing Index Page..."); this.renderIndexEssayTimeline(); const loginForm = document.getElementById('login-form-aside'); if(loginForm) { loginForm.addEventListener('submit', (e) => { e.preventDefault(); alert('ログイン成功！（仮）'); window.location.href = 'logged_in.html'; }); } },
    async initLoggedInPage() { console.log("Initializing Logged-in Page..."); this.renderLeftColumn(); this.renderEssayTimeline(); this.renderPopularEssays(); this.renderRecentMedia(); this.renderLoggedInActiveThreads(); this.initializeTabs(); },
    async initEssayDetailPage() { console.log("Initializing Essay Detail Page..."); this.renderLeftColumn(); const essayId = getQueryParam('id'); if (essayId) { this.renderEssayDetail(parseInt(essayId, 10)); this.handleEssayCommentForm(parseInt(essayId, 10)); } else { const contentArea = document.getElementById('essay-detail-content'); if(contentArea) contentArea.innerHTML = '<p>エラー: 随筆IDが指定されていません。</p>'; } },
    async initCreateEssayPage() { console.log("Initializing Create Essay Page..."); this.renderLeftColumn(); this.handleCreateEssayForm(); },
    async initPastEssaysPage() { console.log("Initializing Past Essays Page..."); this.renderLeftColumn(); this.renderPastEssaysList(); },
    async initProfilePage() { console.log("Initializing Profile Page..."); this.renderLeftColumn(); this.renderRecentProfileEssays(); this.handleProfileForm(); },
    async initNotificationsPage() { console.log("Initializing Notifications Page..."); this.renderLeftColumn(); this.renderNotifications(); },
    async initBulletinboardPage() { console.log("Initializing Bulletin Board Page..."); this.renderLeftColumn('wakiaiai'); this.renderFeaturedThreads(); this.renderHotThreads(); },
    async initThreadDetailPage() { console.log("Initializing Thread Detail Page..."); this.renderLeftColumn(); const threadId = getQueryParam('id'); if (threadId) { this.renderThreadDetail(threadId); this.handleThreadCommentForm(threadId); } else { const wrapper = document.getElementById('thread-detail-wrapper'); if (wrapper) wrapper.innerHTML = '<p>エラー: スレッドIDが指定されていません。</p>'; } },
    async initCategoryPage(categoryKey) { console.log(`Initializing Category Page: ${categoryKey}`); this.renderLeftColumn(categoryKey); this.renderCategoryHeader(categoryKey); this.renderCategoryThreads(categoryKey); this.handleCreateThreadForm(categoryKey); },
    
    // --- 2.6. レンダリングメソッド群 ---
    renderLeftColumn: function(activeCategory = null) { const userImageEl = document.getElementById('left-column-user-image'); const usernameTextEl = document.getElementById('left-column-username-text'); if (userImageEl) { userImageEl.src = this.currentUser.profileImageUrl || 'default_user_thumb.png'; userImageEl.alt = `${this.currentUser.name}の画像`; } if (usernameTextEl) { usernameTextEl.textContent = this.currentUser.name; } const followingList = document.getElementById('following-list-left-column'); if (followingList) { let html = ''; if (this.followingUsers && this.followingUsers.length > 0) { this.followingUsers.forEach(user => { html += `<li><a href="${user.profileUrl}">${escapeHtml(user.name)}</a></li>`; }); } else { html = '<li style="padding: 4px 15px; font-size: 0.9em; color: #777;">まだ誰もいません</li>'; } followingList.innerHTML = html; } },
    renderIndexEssayTimeline: function() { const timeline = document.getElementById('essay-timeline-index'); if (!timeline) return; const sortedEssays = [...this.essays].sort((a, b) => new Date(b.date) - new Date(a.date)); let html = ''; if (sortedEssays.length > 0) { sortedEssays.forEach(essay => { html += `<li class="essay-item-index essay-item-no-link"><h4>${escapeHtml(essay.title)}</h4><p>${escapeHtml(essay.snippet)}</p><div class="post-meta"><span>投稿者: ${escapeHtml(essay.author)}</span> | <span>投稿日: ${essay.date}</span></div></li>`; }); } else { html = '<li>まだ随筆がありません。</li>'; } timeline.innerHTML = html; },
    renderEssayTimeline: function() { const timeline = document.getElementById('essay-timeline-logged-in'); if (!timeline) return; const sortedEssays = [...this.essays].sort((a, b) => new Date(b.date) - new Date(a.date)); let html = ''; if (sortedEssays.length > 0) { sortedEssays.forEach(essay => { html += `<li class="essay-item-logged-in"><div class="essay-item-ranked"><div class="rank-crown-container"></div><div class="essay-title-container"><h4 class="essay-title-logged-in"><a href="essay_detail.html?id=${essay.id}">${escapeHtml(essay.title)}</a></h4><span class="essay-author-logged-in">by <a href="profile.html?user=${escapeHtml(essay.author)}">${escapeHtml(essay.author)}</a></span></div></div><p class="essay-snippet-logged-in">${escapeHtml(essay.snippet)}</p><div class="essay-meta-logged-in"><span>投稿日: ${essay.date}</span></div></li>`; }); } else { html = '<li>まだ随筆がありません。</li>'; } timeline.innerHTML = html; },
    renderPopularEssays: function() { const list = document.getElementById('popular-essays-list'); if (!list) return; const sortedPopular = [...this.popularEssays].sort((a, b) => (b.views || 0) - (a.views || 0)); let html = ''; if (sortedPopular.length > 0) { sortedPopular.forEach((essay, index) => { const rank = index + 1; const crownHtml = getCrownHtml(rank); html += `<li class="essay-item-logged-in"><div class="essay-item-ranked"><div class="rank-crown-container">${crownHtml}</div><div class="essay-title-container"><h4 class="essay-title-logged-in"><a href="essay_detail.html?id=${essay.id}">${escapeHtml(essay.title)}</a></h4><span class="essay-author-logged-in">by <a href="profile.html?user=${escapeHtml(essay.author)}">${escapeHtml(essay.author)}</a></span></div></div><p class="essay-snippet-logged-in">${escapeHtml(essay.snippet)}</p><div class="essay-meta-logged-in"><span>投稿日: ${essay.date}</span></div></li>`; }); } else { html = '<li>人気の随筆はありません。</li>'; } list.innerHTML = html; },
    renderRecentMedia: function() { const container = document.getElementById('recent-essay-images-tab'); if (!container) return; let html = ''; const recentMedia = this.mediaItems.slice(0, 8); if (recentMedia.length > 0) { recentMedia.forEach(item => { const mediaTag = item.type === 'essay_video' ? `<video src="${item.mediaUrl}" preload="metadata"></video>` : `<img src="${item.thumbnailUrl}" alt="${escapeHtml(item.essayTitle)}の画像">`; html += `<div class="recent-media-item"><a href="${item.linkUrl}" title="${escapeHtml(item.essayTitle)} by ${escapeHtml(item.author)}">${mediaTag}</a></div>`; }); } else { html = '<p>最近投稿された画像や動画はありません。</p>'; } container.innerHTML = html; },
    renderLoggedInActiveThreads: function() { const list = document.getElementById('active-threads-list'); if (!list) return; const activeThreads = [...this.allThreads].sort((a, b) => b.commentCount - a.commentCount).slice(0, 5); let html = ''; if(activeThreads.length > 0) { activeThreads.forEach((thread, index) => { const rank = index + 1; const crownHtml = getCrownHtml(rank); const categoryName = this.categoryDisplayNames[thread.category] || 'その他'; html += `<li class="thread-list-item"><div class="rank-display">${crownHtml}${rank}位</div><div class="thread-info-container"><a href="thread_detail.html?id=${thread.id}" class="thread-title-link"><span class="thread-category-badge">${escapeHtml(categoryName)}</span>${escapeHtml(thread.title)}</a><div class="thread-stats"><span>コメント: ${thread.commentCount}</span></div></div></li>`; }); } else { html = '<li>現在にぎやかなスレッドはありません。</li>'; } list.innerHTML = html; },
    renderRecentProfileEssays: function() { const list = document.getElementById('recent-profile-essays-list'); if (!list) return; const userEssays = this.essays.filter(essay => essay.author === this.currentUser.name); const sortedEssays = userEssays.sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 5); let html = ''; if (sortedEssays.length > 0) { sortedEssays.forEach(essay => { html += `<li class="essay-item-logged-in"><div class="essay-item-ranked"><div class="rank-crown-container"></div><div class="essay-title-container"><h4 class="essay-title-logged-in"><a href="essay_detail.html?id=${essay.id}">${escapeHtml(essay.title)}</a></h4><span class="essay-author-logged-in">by <a href="profile.html?user=${escapeHtml(essay.author)}">${escapeHtml(essay.author)}</a></span></div></div><p class="essay-snippet-logged-in">${escapeHtml(essay.snippet)}</p><div class="essay-meta-logged-in"><span>投稿日: ${essay.date}</span></div></li>`; }); } else { html = `<li>${escapeHtml(this.currentUser.name)}さんの随筆はまだありません。</li>`; } list.innerHTML = html; },
    renderNotifications: function() { const list = document.getElementById('notification-list-area'); if (!list) return; const sortedNotifications = [...this.notifications].sort((a, b) => new Date(b.date) - new Date(a.date)); let html = ''; if (sortedNotifications.length > 0) { sortedNotifications.forEach(noti => { let iconHtml = ''; let textHtml = ''; const unreadClass = noti.read ? '' : 'notification-unread'; switch (noti.type) { case 'comment': iconHtml = '💬'; textHtml = `<a href="${noti.user.profileUrl}">${escapeHtml(noti.user.name)}</a>さんがあなたの随筆「<a href="${noti.essay.url}">${escapeHtml(noti.essay.title)}</a>」に一言申しました。`; break; case 'follow': iconHtml = '👀'; textHtml = `<a href="${noti.user.profileUrl}">${escapeHtml(noti.user.name)}</a>さんがあなたを刮目し始めました。`; break; case 'system': iconHtml = '⚙️'; textHtml = escapeHtml(noti.message); break; default: iconHtml = '🔔'; textHtml = '新しい通知があります。'; } html += `<li class="notification-item ${unreadClass}"><div class="notification-icon">${iconHtml}</div><div class="notification-content"><p class="notification-text">${textHtml}</p><span class="notification-date">${new Date(noti.date).toLocaleString('ja-JP')}</span></div></li>`; }); } else { html = '<li style="text-align: center; padding: 20px;">新しい通知はありません。</li>'; } list.innerHTML = html; },
    renderPastEssaysList: function() { const listArea = document.getElementById('past-essays-list-area'); if (!listArea) return; const userEssays = this.essays.filter(essay => essay.author === this.currentUser.name); const sortedEssays = userEssays.sort((a, b) => new Date(b.date) - new Date(a.date)); let html = ''; if (sortedEssays.length > 0) { sortedEssays.forEach(essay => { html += `<li class="past-essay-list-item"><a href="essay_detail.html?id=${essay.id}"><span class="past-essay-list-title">${escapeHtml(essay.title)}</span><span class="past-essay-list-meta">投稿日: ${essay.date}</span><p class="past-essay-list-snippet">${escapeHtml(essay.snippet)}</p></a></li>`; }); } else { html = `<li style="text-align: center; padding: 20px;">${escapeHtml(this.currentUser.name)}さんの随筆はまだありません。</li>`; } listArea.innerHTML = html; },
    renderEssayDetail: function(essayId) { const contentArea = document.getElementById('essay-detail-content'); if (!contentArea) return; const essay = this.essays.find(e => e.id === essayId); if (!essay) { contentArea.innerHTML = '<p>指定された随筆が見つかりませんでした。</p>'; return; } let mediaHtml = ''; if (essay.image) { mediaHtml = `<img src="${essay.image}" alt="随筆の画像">`; } else if (essay.videoUrl) { mediaHtml = `<video src="${essay.videoUrl}" controls width="100%">お使いのブラウザは動画タグをサポートしていません。</video>`; } else if (essay.youtubeVideoId) { mediaHtml = `<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; background: #000;"><iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" src="https://www.youtube.com/embed/${essay.youtubeVideoId}" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div>`; } let commentsHtml = ''; const comments = this.allComments[essayId] || []; if (comments.length > 0) { comments.forEach(comment => { commentsHtml += `<div class="comment-item"><p class="comment-author">${escapeHtml(comment.author)}</p><p class="comment-text">${escapeHtml(comment.text)}</p><p class="comment-date">${new Date(comment.date).toLocaleString('ja-JP')}</p></div>`; }); } const detailHtml = `<div class="essay-title-area"><h2>${escapeHtml(essay.title)}</h2></div><div class="essay-meta-detail-wrapper"><div class="essay-meta-detail"><span>投稿者: <a href="profile.html?user=${escapeHtml(essay.author)}">${escapeHtml(essay.author)}</a></span><time datetime="${new Date(essay.date).toISOString()}">投稿日時: ${essay.date}</time></div></div><article><section class="essay-media">${mediaHtml}</section><section class="essay-body">${essay.body}</section></article><section class="comments-section"><h3>コメント</h3><div id="comments-list">${commentsHtml}</div><form id="comment-form" style="margin-top: 20px;"><div><label for="comment-text-input">コメント:</label><textarea id="comment-text-input" name="comment-text" rows="3" placeholder="あなたの声は100文字までです" required maxlength="100"></textarea></div><div style="display: flex; align-items: center; justify-content: flex-end; gap: 10px;"><span id="comment-char-counter" class="char-counter" style="font-size: 0.9em;">0/100</span><button type="submit">投稿する</button></div></form></section>`; contentArea.innerHTML = detailHtml; },
    renderFeaturedThreads: function() { const list = document.getElementById('featured-threads-list'); if (!list) return; const sorted = [...this.allThreads].sort((a, b) => (b.accessCount || 0) - (a.accessCount || 0)).slice(0, 5); let html = ''; if (sorted.length > 0) { sorted.forEach((thread, index) => { const rank = index + 1; const crown = getCrownHtml(rank); const categoryName = this.categoryDisplayNames[thread.category] || 'その他'; html += `<li><div class="rank-display">${crown}${rank}位</div><div class="thread-info-container"><div><span class="thread-category-badge">${escapeHtml(categoryName)}</span><a href="thread_detail.html?id=${thread.id}" class="thread-title-link">${escapeHtml(thread.title)}</a></div><div class="thread-stats">アクセス数: ${thread.accessCount || 0}</div></div></li>`; }); } else { html = '<li>現在、注目されてるスレはありません。</li>'; } list.innerHTML = html; },
    renderHotThreads: function() { const list = document.getElementById('hot-threads-list'); if (!list) return; const sorted = [...this.allThreads].sort((a, b) => (b.commentCount || 0) - (a.commentCount || 0)).slice(0, 5); let html = ''; if (sorted.length > 0) { sorted.forEach((thread, index) => { const rank = index + 1; const crown = getCrownHtml(rank); const categoryName = this.categoryDisplayNames[thread.category] || 'その他'; html += `<li><div class="rank-display">${crown}${rank}位</div><div class="thread-info-container"><div><span class="thread-category-badge">${escapeHtml(categoryName)}</span><a href="thread_detail.html?id=${thread.id}" class="thread-title-link">${escapeHtml(thread.title)}</a></div><div class="thread-stats">コメント数: ${thread.commentCount || 0}</div></div></li>`; }); } else { html = '<li>現在、盛り上がってるスレはありません。</li>'; } list.innerHTML = html; },
    renderCategoryHeader: function(categoryKey) { const displayName = this.categoryDisplayNames[categoryKey] || "カテゴリ"; const headerEl = document.getElementById('category-name-display'); const formHeaderEl = document.querySelector('.post-form h3'); if (headerEl) { headerEl.textContent = `${displayName}スレッド一覧`; } if (formHeaderEl) { formHeaderEl.textContent = `新しいスレッドを「${displayName}」に作成`; } },
    renderCategoryThreads: function(categoryKey) { const list = document.getElementById('category-threads-list'); if (!list) return; const categoryThreads = this.allThreads.filter(t => t.category === categoryKey).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)); let html = ''; if (categoryThreads.length > 0) { categoryThreads.forEach(thread => { html += `<li><a href="thread_detail.html?id=${thread.id}"><div class="thread-title">${escapeHtml(thread.title)}</div><div class="thread-meta"><span>コメント: ${thread.commentCount}</span><span>作成者: ${escapeHtml(thread.author)}</span><span>作成日時: ${new Date(thread.createdAt).toLocaleString('ja-JP')}</span></div></a></li>`; }); } else { html = `<li style="padding: 15px; text-align: center;">このカテゴリのスレッドはまだありません。</li>`; } list.innerHTML = html; },
    renderThreadDetail: function(threadId) { const wrapper = document.getElementById('thread-detail-wrapper'); if (!wrapper) return; const thread = this.allThreads.find(t => t.id === threadId); if (!thread) { wrapper.innerHTML = '<p>指定されたスレッドが見つかりませんでした。</p>'; return; } let commentsHtml = ''; const comments = this.threadComments[threadId] || []; if (comments.length > 0) { comments.forEach((comment, index) => { commentsHtml += `<div class="comment-item"><p class="comment-meta"><span class="comment-number">${index + 1}:</span><span class="comment-author">${escapeHtml(comment.author)}</span><time class="comment-date" datetime="${comment.date}">${new Date(comment.date).toLocaleString('ja-JP')}</time></p><p class="comment-text">${escapeHtml(comment.text)}</p></div>`; }); } const detailHtml = `<header class="thread-header"><h2 id="thread-title-detail">${escapeHtml(thread.title)}</h2><div class="thread-meta-detail"><span id="thread-author-detail">作成者: ${escapeHtml(thread.author)}</span><time id="thread-created-at-detail" datetime="${thread.createdAt}">作成日時: ${new Date(thread.createdAt).toLocaleString('ja-JP')}</time><span id="thread-category-detail">カテゴリ: <a href="category_${thread.category}.html">${escapeHtml(this.categoryDisplayNames[thread.category] || 'その他')}</a></span></div></header><section class="comments-section"><div id="thread-comments-list">${commentsHtml}</div><form id="comment-form"><div class="form-group-textarea"><label for="comment-text-input">あなたの声:</label><textarea id="comment-text-input" name="comment-text" rows="4" placeholder="１回の声は100文字までです、、、" maxlength="100" required></textarea></div><div class="comment-form-actions"><button type="submit">投稿する</button><span id="comment-char-counter">0 / 100</span></div></form></section>`; wrapper.innerHTML = detailHtml; },
    
    // --- 2.7. イベントハンドラ・その他 ---
    initializeTabs: function() { const tabContainer = document.querySelector('.tab-container-logged-in, .tab-container'); if (!tabContainer) return; const tabButtons = tabContainer.querySelectorAll('.tab-button-logged-in, .tab-button'); const tabContents = tabContainer.querySelectorAll('.tab-content-logged-in, .tab-content'); tabButtons.forEach(button => { button.addEventListener('click', () => { tabButtons.forEach(btn => btn.classList.remove('active')); tabContents.forEach(content => content.classList.remove('active')); button.classList.add('active'); const activeContent = tabContainer.querySelector(`#${button.dataset.tab}`); if (activeContent) activeContent.classList.add('active'); }); }); },
    handleEssayCommentForm: function(essayId) { const form = document.getElementById('comment-form'); if (!form) { setTimeout(() => this.handleEssayCommentForm(essayId), 100); return; } const commentTextInput = document.getElementById('comment-text-input'); const counter = document.getElementById('comment-char-counter'); const MAX_COMMENT_LENGTH = 100; const updateCommentCounter = () => { if (!commentTextInput || !counter) return; const currentLength = commentTextInput.value.length; counter.textContent = `${currentLength}/${MAX_COMMENT_LENGTH}`; counter.classList.toggle('error', currentLength > MAX_COMMENT_LENGTH); }; commentTextInput.addEventListener('input', updateCommentCounter); updateCommentCounter(); form.addEventListener('submit', (e) => { e.preventDefault(); const commentText = commentTextInput.value.trim(); if (commentText.length > MAX_COMMENT_LENGTH) { alert(`コメントの文字数が上限（${MAX_COMMENT_LENGTH}文字）を超えています。`); return; } if (commentText) { const newComment = { author: this.currentUser.name, text: commentText, date: new Date().toISOString() }; if (!this.allComments[essayId]) { this.allComments[essayId] = []; } this.allComments[essayId].push(newComment); localStorage.setItem('allComments', JSON.stringify(this.allComments)); this.renderEssayDetail(essayId); this.handleEssayCommentForm(essayId); } }); },
    handleCreateEssayForm: function() { const form = document.getElementById('essay-form'); if (!form) return; const titleInput = document.getElementById('essay-title'); const contentInput = document.getElementById('essay-content'); const titleCounter = document.getElementById('title-char-counter'); const contentCounter = document.getElementById('content-char-counter'); const mediaInput = document.getElementById('essay-media'); const youtubeUrlInput = document.getElementById('essay-youtube-url'); const previewText = document.getElementById('preview-text'); const imagePreview = document.getElementById('image-preview'); const videoPreview = document.getElementById('video-preview'); const youtubePreview = document.getElementById('youtube-preview'); const MAX_TITLE_LENGTH = 30; const MAX_CONTENT_LENGTH = 1000; const clearAllPreviews = () => { previewText.style.display = 'block'; imagePreview.style.display = 'none'; videoPreview.style.display = 'none'; youtubePreview.style.display = 'none'; youtubePreview.innerHTML = ''; }; const updateCounter = (input, counter, maxLength) => { if (!input || !counter) return; const currentLength = input.value.length; counter.textContent = `${currentLength}/${maxLength}`; counter.classList.toggle('error', currentLength > maxLength); }; titleInput.addEventListener('input', () => updateCounter(titleInput, titleCounter, MAX_TITLE_LENGTH)); contentInput.addEventListener('input', () => updateCounter(contentInput, contentCounter, MAX_CONTENT_LENGTH)); updateCounter(titleInput, titleCounter, MAX_TITLE_LENGTH); updateCounter(contentInput, contentCounter, MAX_CONTENT_LENGTH); mediaInput.addEventListener('change', (e) => { youtubeUrlInput.value = ''; clearAllPreviews(); const file = e.target.files[0]; if (!file) return; const reader = new FileReader(); reader.onload = (event) => { previewText.style.display = 'none'; if (file.type.startsWith('image/')) { imagePreview.src = event.target.result; imagePreview.style.display = 'block'; } else if (file.type.startsWith('video/')) { videoPreview.src = event.target.result; videoPreview.style.display = 'block'; } }; reader.readAsDataURL(file); }); youtubeUrlInput.addEventListener('input', () => { mediaInput.value = ''; clearAllPreviews(); const videoId = getYouTubeVideoId(youtubeUrlInput.value); if (videoId) { previewText.style.display = 'none'; youtubePreview.innerHTML = `<iframe src="https://www.youtube.com/embed/${videoId}" frameborder="0" allowfullscreen></iframe>`; youtubePreview.style.display = 'block'; } }); form.addEventListener('submit', (e) => { e.preventDefault(); const title = titleInput.value; const content = contentInput.value; if (title.length > MAX_TITLE_LENGTH) { alert(`タイトルの文字数が上限（${MAX_TITLE_LENGTH}文字）を超えています。`); return; } if (content.length > MAX_CONTENT_LENGTH) { alert(`本文の文字数が上限（${MAX_CONTENT_LENGTH}文字）を超えています。`); return; } const mediaFile = mediaInput.files[0]; const youtubeVideoId = getYouTubeVideoId(youtubeUrlInput.value); const today = new Date(); const dateString = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`; const snippet = content.replace(/\n/g, ' ').substring(0, 100) + (content.length > 100 ? '...' : ''); const newEssay = { id: Date.now(), title: title, author: this.currentUser.name, snippet: snippet, date: dateString, body: content.replace(/\n/g, '<br>'), image: null, videoUrl: null, youtubeVideoId: null }; if (youtubeVideoId) { newEssay.youtubeVideoId = youtubeVideoId; this.saveNewEssay(newEssay); alert('随筆を投稿しました！'); window.location.href = 'logged_in.html'; } else if (mediaFile) { const reader = new FileReader(); reader.onloadend = () => { if (mediaFile.type.startsWith('image/')) { newEssay.image = reader.result; } else if (mediaFile.type.startsWith('video/')) { newEssay.videoUrl = reader.result; } this.saveNewEssay(newEssay); alert('随筆を投稿しました！'); window.location.href = 'logged_in.html'; }; reader.readAsDataURL(mediaFile); } else { this.saveNewEssay(newEssay); alert('随筆を投稿しました！'); window.location.href = 'logged_in.html'; } }); },
    handleProfileForm: function() { const profileDisplay = document.getElementById('profile-display'); const profileEditForm = document.getElementById('profile-edit-form'); if (!profileDisplay || !profileEditForm) return; const editButton = document.getElementById('edit-profile-button'); const cancelButton = document.getElementById('cancel-edit-button'); const form = document.getElementById('profile-edit-form'); const imagePreview = document.getElementById('image-preview'); const imageInput = document.getElementById('edit_profile_image'); const displayImage = document.getElementById('display-profile-image'); let currentProfileData = JSON.parse(localStorage.getItem('userProfile') || '{}'); const updateDisplay = () => { for (const key in this.profileFields) { const displayEl = document.getElementById(this.profileFields[key].display); if (displayEl) { let value = currentProfileData[key] || '[未設定]'; if (key === 'gender') value = this.genderMap[currentProfileData[key]] || '[未設定]'; if (key === 'blood_type') value = this.bloodTypeMap[currentProfileData[key]] || '[未設定]'; displayEl.textContent = value; } } displayImage.src = currentProfileData.profileImage || 'default_user_thumb.png'; this.renderLeftColumn(); }; const populateForm = () => { for (const key in this.profileFields) { const editEl = document.getElementById(this.profileFields[key].edit); if (editEl) { editEl.value = currentProfileData[key] || ''; } } imagePreview.src = currentProfileData.profileImage || 'default_user_thumb.png'; imageInput.value = ''; }; updateDisplay(); editButton.addEventListener('click', () => { currentProfileData = JSON.parse(localStorage.getItem('userProfile') || '{}'); populateForm(); profileDisplay.style.display = 'none'; profileEditForm.style.display = 'block'; }); cancelButton.addEventListener('click', () => { profileEditForm.style.display = 'none'; profileDisplay.style.display = 'block'; }); imageInput.addEventListener('change', (e) => { const file = e.target.files[0]; if (file) { const reader = new FileReader(); reader.onload = (event) => { imagePreview.src = event.target.result; }; reader.readAsDataURL(file); } }); form.addEventListener('submit', (e) => { e.preventDefault(); const newProfileData = {}; for (const key in this.profileFields) { newProfileData[key] = document.getElementById(this.profileFields[key].edit).value; } const saveProfile = (imageData) => { if (imageData) { newProfileData.profileImage = imageData; } else { newProfileData.profileImage = currentProfileData.profileImage; } localStorage.setItem('userProfile', JSON.stringify(newProfileData)); this.currentUser.name = newProfileData.username || '座の人ユーザー'; this.currentUser.profileImageUrl = newProfileData.profileImage || 'default_user_thumb.png'; currentProfileData = newProfileData; updateDisplay(); profileEditForm.style.display = 'none'; profileDisplay.style.display = 'block'; alert('プロフィールを保存しました！'); }; const file = imageInput.files[0]; if (file) { const reader = new FileReader(); reader.onloadend = () => saveProfile(reader.result); reader.readAsDataURL(file); } else { saveProfile(null); } }); },
    handleThreadCommentForm: function(threadId) { const form = document.getElementById('comment-form'); if (!form) { setTimeout(() => this.handleThreadCommentForm(threadId), 100); return; } const commentTextInput = document.getElementById('comment-text-input'); const counter = document.getElementById('comment-char-counter'); if (!commentTextInput || !counter) return; const MAX_COMMENT_LENGTH = 100; const updateCounter = () => { const currentLength = commentTextInput.value.length; counter.textContent = `${currentLength} / ${MAX_COMMENT_LENGTH}`; counter.classList.toggle('error', currentLength > MAX_COMMENT_LENGTH); }; commentTextInput.addEventListener('input', updateCounter); updateCounter(); form.addEventListener('submit', (e) => { e.preventDefault(); const commentText = commentTextInput.value.trim(); if (commentText.length > MAX_COMMENT_LENGTH) { alert(`コメントが長すぎます（${MAX_COMMENT_LENGTH}文字以内）。`); return; } if (commentText) { const newComment = { author: this.currentUser.name, text: commentText, date: new Date().toISOString() }; if (!this.threadComments[threadId]) { this.threadComments[threadId] = []; } this.threadComments[threadId].push(newComment); localStorage.setItem('threadComments', JSON.stringify(this.threadComments)); const thread = this.allThreads.find(t => t.id === threadId); if (thread) { thread.commentCount = (thread.commentCount || 0) + 1; localStorage.setItem('allThreads', JSON.stringify(this.allThreads)); } this.renderThreadDetail(threadId); this.handleThreadCommentForm(threadId); } }); },
    handleCreateThreadForm: function(categoryKey) { const titleInput = document.getElementById('new-thread-title'); const counter = document.getElementById('new-thread-char-counter'); const createButton = document.getElementById('create-new-thread-button'); if (!titleInput || !counter || !createButton) return; const MAX_TITLE_LENGTH = 30; const updateCounter = () => { const currentLength = titleInput.value.length; counter.textContent = `${currentLength} / ${MAX_TITLE_LENGTH}`; counter.classList.toggle('error', currentLength > MAX_TITLE_LENGTH); }; titleInput.addEventListener('input', updateCounter); updateCounter(); createButton.addEventListener('click', () => { const title = titleInput.value.trim(); if (!title) { alert('スレッド名を入力してください。'); return; } if (title.length > MAX_TITLE_LENGTH) { alert(`スレッド名が長すぎます（${MAX_TITLE_LENGTH}文字以内）。`); return; } const newThread = { id: 'thread' + Date.now(), title: title, category: categoryKey, accessCount: 1, commentCount: 0, createdAt: new Date().toISOString(), author: this.currentUser.name }; this.allThreads.unshift(newThread); localStorage.setItem('allThreads', JSON.stringify(this.allThreads)); alert('新しいスレッドを作成しました！'); this.renderCategoryThreads(categoryKey); titleInput.value = ''; updateCounter(); }); },
    saveNewEssay: function(essayData) { const essays = JSON.parse(localStorage.getItem('essays') || '[]'); essays.unshift(essayData); localStorage.setItem('essays', JSON.stringify(essays)); console.log("New essay saved:", essayData); },
};

// --- 3. DOMContentLoaded でアプリケーションを実行 ---
document.addEventListener('DOMContentLoaded', async () => {
    await loadPageParts(); 
    App.initializeData();
    const path = window.location.pathname.split("/").pop() || 'index.html';
    await App.init(path);
});

async function loadPageParts() {
    const path = window.location.pathname.split("/").pop() || 'index.html';
    const essayPages = ['logged_in.html', 'essay_detail.html', 'create_essay.html', 'past_essays.html', 'profile.html', 'notifications.html'];
    const boardPages = ['bulletinboard.html', 'thread_detail.html', 'category_zatsudan.html', 'category_news.html', 'category_work.html', 'category_anime.html', 'category_sports.html', 'category_tv.html', 'category_game.html'];
    
    const allThreads = JSON.parse(localStorage.getItem('allThreads') || '[]');

    if (essayPages.includes(path)) {
        const container = document.getElementById('left-column-container');
        if (typeof loadHTMLPart === 'function' && container) {
            await loadHTMLPart('_left_column_logged_in.html', 'left-column-container');
        }
    } else if (boardPages.includes(path)) {
        const container = document.getElementById('left-column-container');
        if (typeof loadHTMLPart === 'function' && container) {
            let categoryKey = 'wakiaiai';
            if(path.startsWith('category_')) {
                categoryKey = path.replace('category_', '').replace('.html', '');
            } else if (path === 'thread_detail.html') {
                const threadId = getQueryParam('id');
                const thread = allThreads.find(t => t.id === threadId); 
                if (thread) {
                    categoryKey = thread.category;
                } else {
                    categoryKey = null;
                }
            }
            await loadHTMLPart('_left_column_bulletinboard.html', 'left-column-container', categoryKey);
        }
    }
}